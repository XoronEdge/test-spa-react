{"ast":null,"code":"import Validate from \"./InputValidation\";\nvar FormValidation = {\n  REQUIRED: function REQUIRED(value) {\n    return Validate.validateRequired(value) ? true : false;\n  },\n  EMAIL: function EMAIL(value) {\n    return Validate.validateEmail(value) ? true : false;\n  },\n  LETTER: function LETTER(value) {\n    return Validate.validateletters(value) ? true : false;\n  },\n  NUMBER: function NUMBER(value) {\n    return Validate.validateNumber(value) ? true : false;\n  }\n};\n\nvar FieldValidator = function FieldValidator(field) {\n  var result = [];\n  field.constraints.map(function (constraint, index) {\n    if (!FormValidation[constraint](field.value)) {\n      result.push(false);\n    }\n  });\n  return !result.includes(false);\n};\n\nexport { FieldValidator };","map":{"version":3,"sources":["/home/lala/spalifeandstory/src/Utilities/FormValidation.js"],"names":["Validate","FormValidation","REQUIRED","value","validateRequired","EMAIL","validateEmail","LETTER","validateletters","NUMBER","validateNumber","FieldValidator","field","result","constraints","map","constraint","index","push","includes"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,mBAArB;AACA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,kBAASC,KAAT,EAAgB;AACxB,WAAOH,QAAQ,CAACI,gBAAT,CAA0BD,KAA1B,IAAmC,IAAnC,GAA0C,KAAjD;AACD,GAHoB;AAIrBE,EAAAA,KAAK,EAAE,eAASF,KAAT,EAAgB;AACrB,WAAOH,QAAQ,CAACM,aAAT,CAAuBH,KAAvB,IAAgC,IAAhC,GAAuC,KAA9C;AACD,GANoB;AAOrBI,EAAAA,MAAM,EAAE,gBAASJ,KAAT,EAAgB;AACtB,WAAOH,QAAQ,CAACQ,eAAT,CAAyBL,KAAzB,IAAkC,IAAlC,GAAyC,KAAhD;AACD,GAToB;AAUrBM,EAAAA,MAAM,EAAE,gBAASN,KAAT,EAAgB;AACtB,WAAOH,QAAQ,CAACU,cAAT,CAAwBP,KAAxB,IAAiC,IAAjC,GAAwC,KAA/C;AACD;AAZoB,CAAvB;;AAeA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAC9B,MAAIC,MAAM,GAAG,EAAb;AACAD,EAAAA,KAAK,CAACE,WAAN,CAAkBC,GAAlB,CAAsB,UAACC,UAAD,EAAaC,KAAb,EAAuB;AAC3C,QAAI,CAAChB,cAAc,CAACe,UAAD,CAAd,CAA2BJ,KAAK,CAACT,KAAjC,CAAL,EAA8C;AAC5CU,MAAAA,MAAM,CAACK,IAAP,CAAY,KAAZ;AACD;AACF,GAJD;AAKA,SAAO,CAACL,MAAM,CAACM,QAAP,CAAgB,KAAhB,CAAR;AACD,CARD;;AAUA,SAASR,cAAT","sourcesContent":["import Validate from \"./InputValidation\";\nconst FormValidation = {\n  REQUIRED: function(value) {\n    return Validate.validateRequired(value) ? true : false;\n  },\n  EMAIL: function(value) {\n    return Validate.validateEmail(value) ? true : false;\n  },\n  LETTER: function(value) {\n    return Validate.validateletters(value) ? true : false;\n  },\n  NUMBER: function(value) {\n    return Validate.validateNumber(value) ? true : false;\n  }\n};\n\nconst FieldValidator = field => {\n  let result = [];\n  field.constraints.map((constraint, index) => {\n    if (!FormValidation[constraint](field.value)) {\n      result.push(false);\n    }\n  });\n  return !result.includes(false);\n};\n\nexport { FieldValidator };\n"]},"metadata":{},"sourceType":"module"}
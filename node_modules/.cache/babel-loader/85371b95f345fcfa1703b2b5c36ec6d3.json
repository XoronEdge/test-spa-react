{"ast":null,"code":"import _classCallCheck from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/lala/spalifeandstory/src/components/Lead/LeadListing.js\";\nimport React, { Component, Fragment } from \"react\";\nimport LeadRow from \"./LeadRow\";\nimport LeadForm from \"./LeadForm\";\nimport { ContentListing, HocForm } from \"../Shared\";\nimport { LeadFields } from \"../../Utilities/FormsModel\";\nimport axios from \"axios\";\n\nvar LeadListing =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LeadListing, _Component);\n\n  function LeadListing(props) {\n    var _this;\n\n    _classCallCheck(this, LeadListing);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeadListing).call(this, props));\n    _this.state = {\n      modal: false,\n      ctcModal: false\n    };\n    _this.currentLead = null;\n    _this.selectedLeads = [];\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleCtcModal = _this.toggleCtcModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addLeadCall = _this.addLeadCall.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderListRow = _this.renderListRow.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleListCheckboxChange = _this.handleListCheckboxChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.converToClient = _this.converToClient.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.convertToClientCall = _this.convertToClientCall.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(LeadListing, [{\n    key: \"toggle\",\n    value: function toggle() {\n      this.setState({\n        modal: !this.state.modal\n      });\n    }\n  }, {\n    key: \"toggleCtcModal\",\n    value: function toggleCtcModal() {\n      this.setState({\n        ctcModal: !this.state.ctcModal\n      });\n    }\n  }, {\n    key: \"handleListCheckboxChange\",\n    value: function handleListCheckboxChange(isChecked, leadId) {\n      isChecked ? this.addToSelectedLeads(leadId) : this.removeToSelectedLeads(leadId);\n    }\n  }, {\n    key: \"addToSelectedLeads\",\n    value: function addToSelectedLeads(leadId) {\n      this.selectedLeads.push(leadId);\n      console.log(this.selectedLeads);\n    }\n  }, {\n    key: \"removeToSelectedLeads\",\n    value: function removeToSelectedLeads(leadId) {\n      this.selectedLeads = this.selectedLeads.filter(function (id) {\n        if (id !== leadId) {\n          return true;\n        }\n      });\n      console.log(this.selectedLeads);\n    }\n  }, {\n    key: \"addLeadCall\",\n    value: function addLeadCall(formData) {\n      var $this = this;\n      this.toggle();\n      this.props.authAxios({\n        method: \"post\",\n        url: \"/api/v1/leads\",\n        data: {\n          lead: formData\n        },\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      }).then(function (response) {\n        console.log(response);\n        $this.props.updateLeads(response.data.data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"convertToClientCall\",\n    value: function convertToClientCall(formData) {\n      var $this = this;\n      this.props.authAxios({\n        method: \"post\",\n        url: \"/api/v1/leads/\".concat(this.currentLead.id, \"/convert_to_client\"),\n        data: {\n          lead: formData\n        },\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\"\n        }\n      }).then(function (response) {\n        console.log(response);\n        $this.props.updateLead(response.data.data);\n        $this.setState({\n          ctcModal: !$this.state.ctcModal\n        });\n      }).catch(function (error) {\n        $this.setState({\n          ctcModal: !$this.state.ctcModal\n        });\n      });\n    }\n  }, {\n    key: \"converToClient\",\n    value: function converToClient() {\n      if (this.selectedLeads.length === 1) {\n        this.toggleCtcModal();\n        this.currentLead = this.props.getLead(this.selectedLeads[0]);\n      } else {\n        alert(\"Please Select One To Convert\");\n      }\n    }\n  }, {\n    key: \"initfields\",\n    value: function initfields() {\n      var fieldState = new LeadFields();\n\n      for (var field in fieldState) {\n        fieldState[field].value = this.currentLead[field];\n      }\n\n      return fieldState;\n    }\n  }, {\n    key: \"renderListRow\",\n    value: function renderListRow(lead) {\n      return React.createElement(LeadRow, {\n        match: this.props.match,\n        lead: lead,\n        key: lead.id,\n        handleListCheckboxChange: this.handleListCheckboxChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var column = [\"Lead Name\", \"Country\", \"Channel\", \"Date\", \"Status\"];\n      var columnForSorting = [\"Name\", \"Country\", \"Channel\", \"Date\"];\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(ContentListing, {\n        listRow: this.renderListRow,\n        listColumn: column,\n        Owner: \"Leads\",\n        toggle: this.toggle,\n        list: this.props.leads,\n        updateContent: this.props.updateAllLeads,\n        converToClient: this.converToClient,\n        columnForSorting: columnForSorting,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(HocForm, {\n        toggle: this.toggle,\n        modal: this.state.modal,\n        formFields: LeadFields,\n        FormView: LeadForm,\n        submitCall: this.addLeadCall,\n        isChannel: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), this.state.ctcModal ? React.createElement(HocForm, {\n        toggle: this.toggleCtcModal,\n        modal: this.state.ctcModal,\n        formFields: this.initfields(),\n        FormView: LeadForm,\n        submitCall: this.convertToClientCall,\n        isFilled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }) : null);\n    }\n  }]);\n\n  return LeadListing;\n}(Component);\n\nexport default LeadListing;","map":{"version":3,"sources":["/home/lala/spalifeandstory/src/components/Lead/LeadListing.js"],"names":["React","Component","Fragment","LeadRow","LeadForm","ContentListing","HocForm","LeadFields","axios","LeadListing","props","state","modal","ctcModal","currentLead","selectedLeads","toggle","bind","toggleCtcModal","addLeadCall","renderListRow","handleListCheckboxChange","converToClient","convertToClientCall","setState","isChecked","leadId","addToSelectedLeads","removeToSelectedLeads","push","console","log","filter","id","formData","$this","authAxios","method","url","data","lead","headers","then","response","updateLeads","catch","error","updateLead","length","getLead","alert","fieldState","field","value","match","column","columnForSorting","leads","updateAllLeads","initfields"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport LeadRow from \"./LeadRow\";\nimport LeadForm from \"./LeadForm\";\nimport { ContentListing, HocForm } from \"../Shared\";\nimport { LeadFields } from \"../../Utilities/FormsModel\";\nimport axios from \"axios\";\n\nclass LeadListing extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      ctcModal: false\n    };\n    this.currentLead = null;\n    this.selectedLeads = [];\n    this.toggle = this.toggle.bind(this);\n    this.toggleCtcModal = this.toggleCtcModal.bind(this);\n    this.addLeadCall = this.addLeadCall.bind(this);\n    this.renderListRow = this.renderListRow.bind(this);\n    this.handleListCheckboxChange = this.handleListCheckboxChange.bind(this);\n    this.converToClient = this.converToClient.bind(this);\n    this.convertToClientCall = this.convertToClientCall.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  toggleCtcModal() {\n    this.setState({\n      ctcModal: !this.state.ctcModal\n    });\n  }\n\n  handleListCheckboxChange(isChecked, leadId) {\n    isChecked\n      ? this.addToSelectedLeads(leadId)\n      : this.removeToSelectedLeads(leadId);\n  }\n\n  addToSelectedLeads(leadId) {\n    this.selectedLeads.push(leadId);\n    console.log(this.selectedLeads);\n  }\n\n  removeToSelectedLeads(leadId) {\n    this.selectedLeads = this.selectedLeads.filter(id => {\n      if (id !== leadId) {\n        return true;\n      }\n    });\n    console.log(this.selectedLeads);\n  }\n\n  addLeadCall(formData) {\n    let $this = this;\n    this.toggle();\n    this.props\n      .authAxios({\n        method: \"post\",\n        url: \"/api/v1/leads\",\n        data: {\n          lead: formData\n        },\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      })\n      .then(function(response) {\n        console.log(response);\n        $this.props.updateLeads(response.data.data);\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  }\n\n  convertToClientCall(formData) {\n    let $this = this;\n    this.props\n      .authAxios({\n        method: \"post\",\n        url: `/api/v1/leads/${this.currentLead.id}/convert_to_client`,\n        data: {\n          lead: formData\n        },\n        headers: { \"Access-Control-Allow-Origin\": \"*\" }\n      })\n      .then(function(response) {\n        console.log(response);\n        $this.props.updateLead(response.data.data);\n        $this.setState({\n          ctcModal: !$this.state.ctcModal\n        });\n      })\n      .catch(function(error) {\n        $this.setState({\n          ctcModal: !$this.state.ctcModal\n        });\n      });\n  }\n\n  converToClient() {\n    if (this.selectedLeads.length === 1) {\n      this.toggleCtcModal();\n      this.currentLead = this.props.getLead(this.selectedLeads[0]);\n    } else {\n      alert(\"Please Select One To Convert\");\n    }\n  }\n\n  initfields() {\n    let fieldState = new LeadFields();\n    for (let field in fieldState) {\n      fieldState[field].value = this.currentLead[field];\n    }\n    return fieldState;\n  }\n\n  renderListRow(lead) {\n    return (\n      <LeadRow\n        match={this.props.match}\n        lead={lead}\n        key={lead.id}\n        handleListCheckboxChange={this.handleListCheckboxChange}\n      />\n    );\n  }\n\n  render() {\n    const column = [\"Lead Name\", \"Country\", \"Channel\", \"Date\", \"Status\"];\n    const columnForSorting = [\"Name\", \"Country\", \"Channel\", \"Date\"];\n    return (\n      <Fragment>\n        <ContentListing\n          listRow={this.renderListRow}\n          listColumn={column}\n          Owner=\"Leads\"\n          toggle={this.toggle}\n          list={this.props.leads}\n          updateContent={this.props.updateAllLeads}\n          converToClient={this.converToClient}\n          columnForSorting={columnForSorting}\n        />\n        <HocForm\n          toggle={this.toggle}\n          modal={this.state.modal}\n          formFields={LeadFields}\n          FormView={LeadForm}\n          submitCall={this.addLeadCall}\n          isChannel={true}\n        />\n        {this.state.ctcModal ? (\n          <HocForm\n            toggle={this.toggleCtcModal}\n            modal={this.state.ctcModal}\n            formFields={this.initfields()}\n            FormView={LeadForm}\n            submitCall={this.convertToClientCall}\n            isFilled={true}\n          />\n        ) : null}\n      </Fragment>\n    );\n  }\n}\n\nexport default LeadListing;\n"]},"metadata":{},"sourceType":"module"}
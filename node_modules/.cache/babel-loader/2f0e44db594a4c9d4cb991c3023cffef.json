{"ast":null,"code":"import _objectSpread from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/lala/spalifeandstory/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/lala/spalifeandstory/src/components/Shared/HocForm.js\";\nimport React, { Component } from \"react\";\nimport { FieldValidator } from \"../../Utilities/FormValidation\";\n\nvar HocForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HocForm, _Component);\n\n  function HocForm(props) {\n    var _this;\n\n    _classCallCheck(this, HocForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HocForm).call(this, props));\n\n    if (_this.props.isFilled) {\n      _this.state = {\n        formFields: _this.props.formFields\n      };\n    } else {\n      _this.state = {\n        formFields: new _this.props.formFields()\n      };\n    }\n\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.sendFormSubmitRequest = _this.sendFormSubmitRequest.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onModalClosed = _this.onModalClosed.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.populateFields = _this.populateFields.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(HocForm, [{\n    key: \"onModalClosed\",\n    value: function onModalClosed() {\n      this.setState({\n        formFields: new this.props.formFields()\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      e.preventDefault();\n      var error = false;\n      console.log(this.state.formFields);\n      var field = this.state.formFields[e.target.name];\n      var name = e.target.name;\n      field.value = e.target.value;\n\n      if (!FieldValidator(field)) {\n        error = true;\n      }\n\n      var fields = Object.assign({}, this.state);\n      fields.formFields[name] = {\n        value: this.state.formFields[name].value,\n        error: error,\n        constraints: this.state.formFields[name].constraints\n      };\n      this.setState(function (previous_state) {\n        return fields;\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault();\n\n      if (this.checkFormValid()) {\n        this.sendFormSubmitRequest();\n      }\n    }\n  }, {\n    key: \"populateFields\",\n    value: function populateFields(fieldsObject) {\n      this.setState(function (previous_state) {\n        return fieldsObject;\n      });\n    }\n  }, {\n    key: \"checkFormValid\",\n    value: function checkFormValid() {\n      var isValid = true;\n\n      var formFields = _objectSpread({}, this.state.formFields);\n\n      console.log(this.state.formFields);\n\n      for (var field in this.state.formFields) {\n        if (!FieldValidator(this.state.formFields[field])) {\n          console.log(this.state[field]);\n          formFields[field] = {\n            value: this.state.formFields[field].value,\n            error: true,\n            constraints: this.state.formFields[field].constraints\n          };\n          isValid = false;\n        }\n      }\n\n      console.log(formFields);\n      this.setState({\n        formFields: formFields\n      });\n      return isValid;\n    }\n  }, {\n    key: \"sendFormSubmitRequest\",\n    value: function sendFormSubmitRequest() {\n      var formData = _objectSpread({}, this.state.formFields);\n\n      for (var field in this.state.formFields) {\n        formData[field] = this.state.formFields[field].value;\n      }\n\n      this.props.submitCall(formData);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state);\n      console.log(\"+++++++++++++++++++++++++++++++++++++++++++++\");\n      console.log(this.props.formFields);\n      var FormView = this.props.FormView;\n      var _this$props = this.props,\n          modal = _this$props.modal,\n          toggle = _this$props.toggle;\n      return React.createElement(FormView, {\n        modal: modal,\n        toggle: toggle,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        fieldState: this.state.formFields,\n        onModalClosed: this.onModalClosed,\n        isChannel: this.props.isChannel,\n        populateFields: this.populateFields,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return HocForm;\n}(Component);\n\nexport default HocForm;","map":{"version":3,"sources":["/home/lala/spalifeandstory/src/components/Shared/HocForm.js"],"names":["React","Component","FieldValidator","HocForm","props","isFilled","state","formFields","handleChange","bind","handleSubmit","sendFormSubmitRequest","onModalClosed","populateFields","setState","e","preventDefault","error","console","log","field","target","name","value","fields","Object","assign","constraints","previous_state","checkFormValid","fieldsObject","isValid","formData","submitCall","FormView","modal","toggle","isChannel"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { FieldValidator } from \"../../Utilities/FormValidation\";\n\nclass HocForm extends Component {\n  constructor(props) {\n    super(props);\n    if (this.props.isFilled) {\n      this.state = { formFields: this.props.formFields };\n    } else {\n      this.state = {\n        formFields: new this.props.formFields()\n      };\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.sendFormSubmitRequest = this.sendFormSubmitRequest.bind(this);\n    this.onModalClosed = this.onModalClosed.bind(this);\n    this.populateFields = this.populateFields.bind(this);\n  }\n\n  onModalClosed() {\n    this.setState({\n      formFields: new this.props.formFields()\n    });\n  }\n\n  handleChange(e) {\n    e.preventDefault();\n    let error = false;\n    console.log(this.state.formFields);\n    let field = this.state.formFields[e.target.name];\n    let name = e.target.name;\n    field.value = e.target.value;\n    if (!FieldValidator(field)) {\n      error = true;\n    }\n    let fields = Object.assign({}, this.state);\n\n    fields.formFields[name] = {\n      value: this.state.formFields[name].value,\n      error: error,\n      constraints: this.state.formFields[name].constraints\n    };\n    this.setState(previous_state => {\n      return fields;\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.checkFormValid()) {\n      this.sendFormSubmitRequest();\n    }\n  }\n\n  populateFields(fieldsObject) {\n    this.setState(previous_state => {\n      return fieldsObject;\n    });\n  }\n\n  checkFormValid() {\n    let isValid = true;\n    let formFields = { ...this.state.formFields };\n    console.log(this.state.formFields);\n    for (let field in this.state.formFields) {\n      if (!FieldValidator(this.state.formFields[field])) {\n        console.log(this.state[field]);\n        formFields[field] = {\n          value: this.state.formFields[field].value,\n          error: true,\n          constraints: this.state.formFields[field].constraints\n        };\n        isValid = false;\n      }\n    }\n    console.log(formFields);\n    this.setState({\n      formFields\n    });\n    return isValid;\n  }\n\n  sendFormSubmitRequest() {\n    let formData = { ...this.state.formFields };\n    for (let field in this.state.formFields) {\n      formData[field] = this.state.formFields[field].value;\n    }\n    this.props.submitCall(formData);\n  }\n\n  render() {\n    console.log(this.state);\n    console.log(\"+++++++++++++++++++++++++++++++++++++++++++++\");\n    console.log(this.props.formFields);\n\n    const { FormView } = this.props;\n    const { modal, toggle } = this.props;\n    return (\n      <FormView\n        modal={modal}\n        toggle={toggle}\n        handleChange={this.handleChange}\n        handleSubmit={this.handleSubmit}\n        fieldState={this.state.formFields}\n        onModalClosed={this.onModalClosed}\n        isChannel={this.props.isChannel}\n        populateFields={this.populateFields}\n      />\n    );\n  }\n}\n\nexport default HocForm;\n"]},"metadata":{},"sourceType":"module"}